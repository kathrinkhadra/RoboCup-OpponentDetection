# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nao_interaction_msgs/FaceDetected.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FaceDetected(genpy.Message):
  _md5sum = "3b3868bc92bb74386686642b1cf73f53"
  _type = "nao_interaction_msgs/FaceDetected"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message emitted by Nao face detection module.
# It contains the list of faces detected and the cameras poses

Header header

# Face-specific related information

std_msgs/Int32 face_id
std_msgs/Float32 score_reco
std_msgs/String face_label

# Shape related information

std_msgs/Float32 shape_alpha
std_msgs/Float32 shape_beta
std_msgs/Float32 shape_sizeX
std_msgs/Float32 shape_sizeY

# Eyes related information

std_msgs/Float32 right_eye_eyeCenter_x
std_msgs/Float32 right_eye_eyeCenter_y
std_msgs/Float32 right_eye_noseSideLimit_x
std_msgs/Float32 right_eye_noseSideLimit_y
std_msgs/Float32 right_eye_earSideLimit_x
std_msgs/Float32 right_eye_earSideLimit_y
std_msgs/Float32 right_eye_topLimit_x
std_msgs/Float32 right_eye_topLimit_y
std_msgs/Float32 right_eye_bottomLimit_x
std_msgs/Float32 right_eye_bottomLimit_y
std_msgs/Float32 right_eye_midTopEarLimit_x
std_msgs/Float32 right_eye_midTopEarLimit_y
std_msgs/Float32 right_eye_midTopNoseLimit_x
std_msgs/Float32 right_eye_midTopNoseLimit_y

std_msgs/Float32 left_eye_eyeCenter_x
std_msgs/Float32 left_eye_eyeCenter_y
std_msgs/Float32 left_eye_noseSideLimit_x
std_msgs/Float32 left_eye_noseSideLimit_y
std_msgs/Float32 left_eye_earSideLimit_x
std_msgs/Float32 left_eye_earSideLimit_y
std_msgs/Float32 left_eye_topLimit_x
std_msgs/Float32 left_eye_topLimit_y
std_msgs/Float32 left_eye_bottomLimit_x
std_msgs/Float32 left_eye_bottomLimit_y
std_msgs/Float32 left_eye_midTopEarLimit_x
std_msgs/Float32 left_eye_midTopEarLimit_y
std_msgs/Float32 left_eye_midTopNoseLimit_x
std_msgs/Float32 left_eye_midTopNoseLimit_y

# Eyebrows related information

std_msgs/Float32 right_eyebrow_noseSideLimit_x
std_msgs/Float32 right_eyebrow_noseSideLimit_y
std_msgs/Float32 right_eyebrow_center_x
std_msgs/Float32 right_eyebrow_center_y
std_msgs/Float32 right_eyebrow_earSideLimit_x
std_msgs/Float32 right_eyebrow_earSideLimit_y

std_msgs/Float32 left_eyebrow_noseSideLimit_x
std_msgs/Float32 left_eyebrow_noseSideLimit_y
std_msgs/Float32 left_eyebrow_center_x
std_msgs/Float32 left_eyebrow_center_y
std_msgs/Float32 left_eyebrow_earSideLimit_x
std_msgs/Float32 left_eyebrow_earSideLimit_y

# Nose related information

std_msgs/Float32 nose_bottomCenterLimit_x
std_msgs/Float32 nose_bottomCenterLimit_y
std_msgs/Float32 nose_bottomLeftLimit_x
std_msgs/Float32 nose_bottomLeftLimit_y
std_msgs/Float32 nose_bottomRightLimit_x
std_msgs/Float32 nose_bottomRightLimit_y

# Mouth related information

std_msgs/Float32 mouth_leftLimit_x
std_msgs/Float32 mouth_leftLimit_y
std_msgs/Float32 mouth_rightLimit_x
std_msgs/Float32 mouth_rightLimit_y
std_msgs/Float32 mouth_topLimit_x
std_msgs/Float32 mouth_topLimit_y
std_msgs/Float32 mouth_bottomLimit_x
std_msgs/Float32 mouth_bottomLimit_y
std_msgs/Float32 mouth_midTopLeftLimit_x
std_msgs/Float32 mouth_midTopLeftLimit_y
std_msgs/Float32 mouth_midTopRightLimit_x
std_msgs/Float32 mouth_midTopRightLimit_y
std_msgs/Float32 mouth_midBottomRightLimit_x
std_msgs/Float32 mouth_midBottomRightLimit_y
std_msgs/Float32 mouth_midBottomLeftLimit_x
std_msgs/Float32 mouth_midBottomLeftLimit_y

# Camera related information

geometry_msgs/Pose camera_0_pose
geometry_msgs/Pose camera_1_pose
std_msgs/Int32 camera_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','face_id','score_reco','face_label','shape_alpha','shape_beta','shape_sizeX','shape_sizeY','right_eye_eyeCenter_x','right_eye_eyeCenter_y','right_eye_noseSideLimit_x','right_eye_noseSideLimit_y','right_eye_earSideLimit_x','right_eye_earSideLimit_y','right_eye_topLimit_x','right_eye_topLimit_y','right_eye_bottomLimit_x','right_eye_bottomLimit_y','right_eye_midTopEarLimit_x','right_eye_midTopEarLimit_y','right_eye_midTopNoseLimit_x','right_eye_midTopNoseLimit_y','left_eye_eyeCenter_x','left_eye_eyeCenter_y','left_eye_noseSideLimit_x','left_eye_noseSideLimit_y','left_eye_earSideLimit_x','left_eye_earSideLimit_y','left_eye_topLimit_x','left_eye_topLimit_y','left_eye_bottomLimit_x','left_eye_bottomLimit_y','left_eye_midTopEarLimit_x','left_eye_midTopEarLimit_y','left_eye_midTopNoseLimit_x','left_eye_midTopNoseLimit_y','right_eyebrow_noseSideLimit_x','right_eyebrow_noseSideLimit_y','right_eyebrow_center_x','right_eyebrow_center_y','right_eyebrow_earSideLimit_x','right_eyebrow_earSideLimit_y','left_eyebrow_noseSideLimit_x','left_eyebrow_noseSideLimit_y','left_eyebrow_center_x','left_eyebrow_center_y','left_eyebrow_earSideLimit_x','left_eyebrow_earSideLimit_y','nose_bottomCenterLimit_x','nose_bottomCenterLimit_y','nose_bottomLeftLimit_x','nose_bottomLeftLimit_y','nose_bottomRightLimit_x','nose_bottomRightLimit_y','mouth_leftLimit_x','mouth_leftLimit_y','mouth_rightLimit_x','mouth_rightLimit_y','mouth_topLimit_x','mouth_topLimit_y','mouth_bottomLimit_x','mouth_bottomLimit_y','mouth_midTopLeftLimit_x','mouth_midTopLeftLimit_y','mouth_midTopRightLimit_x','mouth_midTopRightLimit_y','mouth_midBottomRightLimit_x','mouth_midBottomRightLimit_y','mouth_midBottomLeftLimit_x','mouth_midBottomLeftLimit_y','camera_0_pose','camera_1_pose','camera_id']
  _slot_types = ['std_msgs/Header','std_msgs/Int32','std_msgs/Float32','std_msgs/String','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','geometry_msgs/Pose','geometry_msgs/Pose','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,face_id,score_reco,face_label,shape_alpha,shape_beta,shape_sizeX,shape_sizeY,right_eye_eyeCenter_x,right_eye_eyeCenter_y,right_eye_noseSideLimit_x,right_eye_noseSideLimit_y,right_eye_earSideLimit_x,right_eye_earSideLimit_y,right_eye_topLimit_x,right_eye_topLimit_y,right_eye_bottomLimit_x,right_eye_bottomLimit_y,right_eye_midTopEarLimit_x,right_eye_midTopEarLimit_y,right_eye_midTopNoseLimit_x,right_eye_midTopNoseLimit_y,left_eye_eyeCenter_x,left_eye_eyeCenter_y,left_eye_noseSideLimit_x,left_eye_noseSideLimit_y,left_eye_earSideLimit_x,left_eye_earSideLimit_y,left_eye_topLimit_x,left_eye_topLimit_y,left_eye_bottomLimit_x,left_eye_bottomLimit_y,left_eye_midTopEarLimit_x,left_eye_midTopEarLimit_y,left_eye_midTopNoseLimit_x,left_eye_midTopNoseLimit_y,right_eyebrow_noseSideLimit_x,right_eyebrow_noseSideLimit_y,right_eyebrow_center_x,right_eyebrow_center_y,right_eyebrow_earSideLimit_x,right_eyebrow_earSideLimit_y,left_eyebrow_noseSideLimit_x,left_eyebrow_noseSideLimit_y,left_eyebrow_center_x,left_eyebrow_center_y,left_eyebrow_earSideLimit_x,left_eyebrow_earSideLimit_y,nose_bottomCenterLimit_x,nose_bottomCenterLimit_y,nose_bottomLeftLimit_x,nose_bottomLeftLimit_y,nose_bottomRightLimit_x,nose_bottomRightLimit_y,mouth_leftLimit_x,mouth_leftLimit_y,mouth_rightLimit_x,mouth_rightLimit_y,mouth_topLimit_x,mouth_topLimit_y,mouth_bottomLimit_x,mouth_bottomLimit_y,mouth_midTopLeftLimit_x,mouth_midTopLeftLimit_y,mouth_midTopRightLimit_x,mouth_midTopRightLimit_y,mouth_midBottomRightLimit_x,mouth_midBottomRightLimit_y,mouth_midBottomLeftLimit_x,mouth_midBottomLeftLimit_y,camera_0_pose,camera_1_pose,camera_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FaceDetected, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.face_id is None:
        self.face_id = std_msgs.msg.Int32()
      if self.score_reco is None:
        self.score_reco = std_msgs.msg.Float32()
      if self.face_label is None:
        self.face_label = std_msgs.msg.String()
      if self.shape_alpha is None:
        self.shape_alpha = std_msgs.msg.Float32()
      if self.shape_beta is None:
        self.shape_beta = std_msgs.msg.Float32()
      if self.shape_sizeX is None:
        self.shape_sizeX = std_msgs.msg.Float32()
      if self.shape_sizeY is None:
        self.shape_sizeY = std_msgs.msg.Float32()
      if self.right_eye_eyeCenter_x is None:
        self.right_eye_eyeCenter_x = std_msgs.msg.Float32()
      if self.right_eye_eyeCenter_y is None:
        self.right_eye_eyeCenter_y = std_msgs.msg.Float32()
      if self.right_eye_noseSideLimit_x is None:
        self.right_eye_noseSideLimit_x = std_msgs.msg.Float32()
      if self.right_eye_noseSideLimit_y is None:
        self.right_eye_noseSideLimit_y = std_msgs.msg.Float32()
      if self.right_eye_earSideLimit_x is None:
        self.right_eye_earSideLimit_x = std_msgs.msg.Float32()
      if self.right_eye_earSideLimit_y is None:
        self.right_eye_earSideLimit_y = std_msgs.msg.Float32()
      if self.right_eye_topLimit_x is None:
        self.right_eye_topLimit_x = std_msgs.msg.Float32()
      if self.right_eye_topLimit_y is None:
        self.right_eye_topLimit_y = std_msgs.msg.Float32()
      if self.right_eye_bottomLimit_x is None:
        self.right_eye_bottomLimit_x = std_msgs.msg.Float32()
      if self.right_eye_bottomLimit_y is None:
        self.right_eye_bottomLimit_y = std_msgs.msg.Float32()
      if self.right_eye_midTopEarLimit_x is None:
        self.right_eye_midTopEarLimit_x = std_msgs.msg.Float32()
      if self.right_eye_midTopEarLimit_y is None:
        self.right_eye_midTopEarLimit_y = std_msgs.msg.Float32()
      if self.right_eye_midTopNoseLimit_x is None:
        self.right_eye_midTopNoseLimit_x = std_msgs.msg.Float32()
      if self.right_eye_midTopNoseLimit_y is None:
        self.right_eye_midTopNoseLimit_y = std_msgs.msg.Float32()
      if self.left_eye_eyeCenter_x is None:
        self.left_eye_eyeCenter_x = std_msgs.msg.Float32()
      if self.left_eye_eyeCenter_y is None:
        self.left_eye_eyeCenter_y = std_msgs.msg.Float32()
      if self.left_eye_noseSideLimit_x is None:
        self.left_eye_noseSideLimit_x = std_msgs.msg.Float32()
      if self.left_eye_noseSideLimit_y is None:
        self.left_eye_noseSideLimit_y = std_msgs.msg.Float32()
      if self.left_eye_earSideLimit_x is None:
        self.left_eye_earSideLimit_x = std_msgs.msg.Float32()
      if self.left_eye_earSideLimit_y is None:
        self.left_eye_earSideLimit_y = std_msgs.msg.Float32()
      if self.left_eye_topLimit_x is None:
        self.left_eye_topLimit_x = std_msgs.msg.Float32()
      if self.left_eye_topLimit_y is None:
        self.left_eye_topLimit_y = std_msgs.msg.Float32()
      if self.left_eye_bottomLimit_x is None:
        self.left_eye_bottomLimit_x = std_msgs.msg.Float32()
      if self.left_eye_bottomLimit_y is None:
        self.left_eye_bottomLimit_y = std_msgs.msg.Float32()
      if self.left_eye_midTopEarLimit_x is None:
        self.left_eye_midTopEarLimit_x = std_msgs.msg.Float32()
      if self.left_eye_midTopEarLimit_y is None:
        self.left_eye_midTopEarLimit_y = std_msgs.msg.Float32()
      if self.left_eye_midTopNoseLimit_x is None:
        self.left_eye_midTopNoseLimit_x = std_msgs.msg.Float32()
      if self.left_eye_midTopNoseLimit_y is None:
        self.left_eye_midTopNoseLimit_y = std_msgs.msg.Float32()
      if self.right_eyebrow_noseSideLimit_x is None:
        self.right_eyebrow_noseSideLimit_x = std_msgs.msg.Float32()
      if self.right_eyebrow_noseSideLimit_y is None:
        self.right_eyebrow_noseSideLimit_y = std_msgs.msg.Float32()
      if self.right_eyebrow_center_x is None:
        self.right_eyebrow_center_x = std_msgs.msg.Float32()
      if self.right_eyebrow_center_y is None:
        self.right_eyebrow_center_y = std_msgs.msg.Float32()
      if self.right_eyebrow_earSideLimit_x is None:
        self.right_eyebrow_earSideLimit_x = std_msgs.msg.Float32()
      if self.right_eyebrow_earSideLimit_y is None:
        self.right_eyebrow_earSideLimit_y = std_msgs.msg.Float32()
      if self.left_eyebrow_noseSideLimit_x is None:
        self.left_eyebrow_noseSideLimit_x = std_msgs.msg.Float32()
      if self.left_eyebrow_noseSideLimit_y is None:
        self.left_eyebrow_noseSideLimit_y = std_msgs.msg.Float32()
      if self.left_eyebrow_center_x is None:
        self.left_eyebrow_center_x = std_msgs.msg.Float32()
      if self.left_eyebrow_center_y is None:
        self.left_eyebrow_center_y = std_msgs.msg.Float32()
      if self.left_eyebrow_earSideLimit_x is None:
        self.left_eyebrow_earSideLimit_x = std_msgs.msg.Float32()
      if self.left_eyebrow_earSideLimit_y is None:
        self.left_eyebrow_earSideLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomCenterLimit_x is None:
        self.nose_bottomCenterLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomCenterLimit_y is None:
        self.nose_bottomCenterLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomLeftLimit_x is None:
        self.nose_bottomLeftLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomLeftLimit_y is None:
        self.nose_bottomLeftLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomRightLimit_x is None:
        self.nose_bottomRightLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomRightLimit_y is None:
        self.nose_bottomRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_leftLimit_x is None:
        self.mouth_leftLimit_x = std_msgs.msg.Float32()
      if self.mouth_leftLimit_y is None:
        self.mouth_leftLimit_y = std_msgs.msg.Float32()
      if self.mouth_rightLimit_x is None:
        self.mouth_rightLimit_x = std_msgs.msg.Float32()
      if self.mouth_rightLimit_y is None:
        self.mouth_rightLimit_y = std_msgs.msg.Float32()
      if self.mouth_topLimit_x is None:
        self.mouth_topLimit_x = std_msgs.msg.Float32()
      if self.mouth_topLimit_y is None:
        self.mouth_topLimit_y = std_msgs.msg.Float32()
      if self.mouth_bottomLimit_x is None:
        self.mouth_bottomLimit_x = std_msgs.msg.Float32()
      if self.mouth_bottomLimit_y is None:
        self.mouth_bottomLimit_y = std_msgs.msg.Float32()
      if self.mouth_midTopLeftLimit_x is None:
        self.mouth_midTopLeftLimit_x = std_msgs.msg.Float32()
      if self.mouth_midTopLeftLimit_y is None:
        self.mouth_midTopLeftLimit_y = std_msgs.msg.Float32()
      if self.mouth_midTopRightLimit_x is None:
        self.mouth_midTopRightLimit_x = std_msgs.msg.Float32()
      if self.mouth_midTopRightLimit_y is None:
        self.mouth_midTopRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_midBottomRightLimit_x is None:
        self.mouth_midBottomRightLimit_x = std_msgs.msg.Float32()
      if self.mouth_midBottomRightLimit_y is None:
        self.mouth_midBottomRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_midBottomLeftLimit_x is None:
        self.mouth_midBottomLeftLimit_x = std_msgs.msg.Float32()
      if self.mouth_midBottomLeftLimit_y is None:
        self.mouth_midBottomLeftLimit_y = std_msgs.msg.Float32()
      if self.camera_0_pose is None:
        self.camera_0_pose = geometry_msgs.msg.Pose()
      if self.camera_1_pose is None:
        self.camera_1_pose = geometry_msgs.msg.Pose()
      if self.camera_id is None:
        self.camera_id = std_msgs.msg.Int32()
    else:
      self.header = std_msgs.msg.Header()
      self.face_id = std_msgs.msg.Int32()
      self.score_reco = std_msgs.msg.Float32()
      self.face_label = std_msgs.msg.String()
      self.shape_alpha = std_msgs.msg.Float32()
      self.shape_beta = std_msgs.msg.Float32()
      self.shape_sizeX = std_msgs.msg.Float32()
      self.shape_sizeY = std_msgs.msg.Float32()
      self.right_eye_eyeCenter_x = std_msgs.msg.Float32()
      self.right_eye_eyeCenter_y = std_msgs.msg.Float32()
      self.right_eye_noseSideLimit_x = std_msgs.msg.Float32()
      self.right_eye_noseSideLimit_y = std_msgs.msg.Float32()
      self.right_eye_earSideLimit_x = std_msgs.msg.Float32()
      self.right_eye_earSideLimit_y = std_msgs.msg.Float32()
      self.right_eye_topLimit_x = std_msgs.msg.Float32()
      self.right_eye_topLimit_y = std_msgs.msg.Float32()
      self.right_eye_bottomLimit_x = std_msgs.msg.Float32()
      self.right_eye_bottomLimit_y = std_msgs.msg.Float32()
      self.right_eye_midTopEarLimit_x = std_msgs.msg.Float32()
      self.right_eye_midTopEarLimit_y = std_msgs.msg.Float32()
      self.right_eye_midTopNoseLimit_x = std_msgs.msg.Float32()
      self.right_eye_midTopNoseLimit_y = std_msgs.msg.Float32()
      self.left_eye_eyeCenter_x = std_msgs.msg.Float32()
      self.left_eye_eyeCenter_y = std_msgs.msg.Float32()
      self.left_eye_noseSideLimit_x = std_msgs.msg.Float32()
      self.left_eye_noseSideLimit_y = std_msgs.msg.Float32()
      self.left_eye_earSideLimit_x = std_msgs.msg.Float32()
      self.left_eye_earSideLimit_y = std_msgs.msg.Float32()
      self.left_eye_topLimit_x = std_msgs.msg.Float32()
      self.left_eye_topLimit_y = std_msgs.msg.Float32()
      self.left_eye_bottomLimit_x = std_msgs.msg.Float32()
      self.left_eye_bottomLimit_y = std_msgs.msg.Float32()
      self.left_eye_midTopEarLimit_x = std_msgs.msg.Float32()
      self.left_eye_midTopEarLimit_y = std_msgs.msg.Float32()
      self.left_eye_midTopNoseLimit_x = std_msgs.msg.Float32()
      self.left_eye_midTopNoseLimit_y = std_msgs.msg.Float32()
      self.right_eyebrow_noseSideLimit_x = std_msgs.msg.Float32()
      self.right_eyebrow_noseSideLimit_y = std_msgs.msg.Float32()
      self.right_eyebrow_center_x = std_msgs.msg.Float32()
      self.right_eyebrow_center_y = std_msgs.msg.Float32()
      self.right_eyebrow_earSideLimit_x = std_msgs.msg.Float32()
      self.right_eyebrow_earSideLimit_y = std_msgs.msg.Float32()
      self.left_eyebrow_noseSideLimit_x = std_msgs.msg.Float32()
      self.left_eyebrow_noseSideLimit_y = std_msgs.msg.Float32()
      self.left_eyebrow_center_x = std_msgs.msg.Float32()
      self.left_eyebrow_center_y = std_msgs.msg.Float32()
      self.left_eyebrow_earSideLimit_x = std_msgs.msg.Float32()
      self.left_eyebrow_earSideLimit_y = std_msgs.msg.Float32()
      self.nose_bottomCenterLimit_x = std_msgs.msg.Float32()
      self.nose_bottomCenterLimit_y = std_msgs.msg.Float32()
      self.nose_bottomLeftLimit_x = std_msgs.msg.Float32()
      self.nose_bottomLeftLimit_y = std_msgs.msg.Float32()
      self.nose_bottomRightLimit_x = std_msgs.msg.Float32()
      self.nose_bottomRightLimit_y = std_msgs.msg.Float32()
      self.mouth_leftLimit_x = std_msgs.msg.Float32()
      self.mouth_leftLimit_y = std_msgs.msg.Float32()
      self.mouth_rightLimit_x = std_msgs.msg.Float32()
      self.mouth_rightLimit_y = std_msgs.msg.Float32()
      self.mouth_topLimit_x = std_msgs.msg.Float32()
      self.mouth_topLimit_y = std_msgs.msg.Float32()
      self.mouth_bottomLimit_x = std_msgs.msg.Float32()
      self.mouth_bottomLimit_y = std_msgs.msg.Float32()
      self.mouth_midTopLeftLimit_x = std_msgs.msg.Float32()
      self.mouth_midTopLeftLimit_y = std_msgs.msg.Float32()
      self.mouth_midTopRightLimit_x = std_msgs.msg.Float32()
      self.mouth_midTopRightLimit_y = std_msgs.msg.Float32()
      self.mouth_midBottomRightLimit_x = std_msgs.msg.Float32()
      self.mouth_midBottomRightLimit_y = std_msgs.msg.Float32()
      self.mouth_midBottomLeftLimit_x = std_msgs.msg.Float32()
      self.mouth_midBottomLeftLimit_y = std_msgs.msg.Float32()
      self.camera_0_pose = geometry_msgs.msg.Pose()
      self.camera_1_pose = geometry_msgs.msg.Pose()
      self.camera_id = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_if().pack(_x.face_id.data, _x.score_reco.data))
      _x = self.face_label.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_66f14di().pack(_x.shape_alpha.data, _x.shape_beta.data, _x.shape_sizeX.data, _x.shape_sizeY.data, _x.right_eye_eyeCenter_x.data, _x.right_eye_eyeCenter_y.data, _x.right_eye_noseSideLimit_x.data, _x.right_eye_noseSideLimit_y.data, _x.right_eye_earSideLimit_x.data, _x.right_eye_earSideLimit_y.data, _x.right_eye_topLimit_x.data, _x.right_eye_topLimit_y.data, _x.right_eye_bottomLimit_x.data, _x.right_eye_bottomLimit_y.data, _x.right_eye_midTopEarLimit_x.data, _x.right_eye_midTopEarLimit_y.data, _x.right_eye_midTopNoseLimit_x.data, _x.right_eye_midTopNoseLimit_y.data, _x.left_eye_eyeCenter_x.data, _x.left_eye_eyeCenter_y.data, _x.left_eye_noseSideLimit_x.data, _x.left_eye_noseSideLimit_y.data, _x.left_eye_earSideLimit_x.data, _x.left_eye_earSideLimit_y.data, _x.left_eye_topLimit_x.data, _x.left_eye_topLimit_y.data, _x.left_eye_bottomLimit_x.data, _x.left_eye_bottomLimit_y.data, _x.left_eye_midTopEarLimit_x.data, _x.left_eye_midTopEarLimit_y.data, _x.left_eye_midTopNoseLimit_x.data, _x.left_eye_midTopNoseLimit_y.data, _x.right_eyebrow_noseSideLimit_x.data, _x.right_eyebrow_noseSideLimit_y.data, _x.right_eyebrow_center_x.data, _x.right_eyebrow_center_y.data, _x.right_eyebrow_earSideLimit_x.data, _x.right_eyebrow_earSideLimit_y.data, _x.left_eyebrow_noseSideLimit_x.data, _x.left_eyebrow_noseSideLimit_y.data, _x.left_eyebrow_center_x.data, _x.left_eyebrow_center_y.data, _x.left_eyebrow_earSideLimit_x.data, _x.left_eyebrow_earSideLimit_y.data, _x.nose_bottomCenterLimit_x.data, _x.nose_bottomCenterLimit_y.data, _x.nose_bottomLeftLimit_x.data, _x.nose_bottomLeftLimit_y.data, _x.nose_bottomRightLimit_x.data, _x.nose_bottomRightLimit_y.data, _x.mouth_leftLimit_x.data, _x.mouth_leftLimit_y.data, _x.mouth_rightLimit_x.data, _x.mouth_rightLimit_y.data, _x.mouth_topLimit_x.data, _x.mouth_topLimit_y.data, _x.mouth_bottomLimit_x.data, _x.mouth_bottomLimit_y.data, _x.mouth_midTopLeftLimit_x.data, _x.mouth_midTopLeftLimit_y.data, _x.mouth_midTopRightLimit_x.data, _x.mouth_midTopRightLimit_y.data, _x.mouth_midBottomRightLimit_x.data, _x.mouth_midBottomRightLimit_y.data, _x.mouth_midBottomLeftLimit_x.data, _x.mouth_midBottomLeftLimit_y.data, _x.camera_0_pose.position.x, _x.camera_0_pose.position.y, _x.camera_0_pose.position.z, _x.camera_0_pose.orientation.x, _x.camera_0_pose.orientation.y, _x.camera_0_pose.orientation.z, _x.camera_0_pose.orientation.w, _x.camera_1_pose.position.x, _x.camera_1_pose.position.y, _x.camera_1_pose.position.z, _x.camera_1_pose.orientation.x, _x.camera_1_pose.orientation.y, _x.camera_1_pose.orientation.z, _x.camera_1_pose.orientation.w, _x.camera_id.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.face_id is None:
        self.face_id = std_msgs.msg.Int32()
      if self.score_reco is None:
        self.score_reco = std_msgs.msg.Float32()
      if self.face_label is None:
        self.face_label = std_msgs.msg.String()
      if self.shape_alpha is None:
        self.shape_alpha = std_msgs.msg.Float32()
      if self.shape_beta is None:
        self.shape_beta = std_msgs.msg.Float32()
      if self.shape_sizeX is None:
        self.shape_sizeX = std_msgs.msg.Float32()
      if self.shape_sizeY is None:
        self.shape_sizeY = std_msgs.msg.Float32()
      if self.right_eye_eyeCenter_x is None:
        self.right_eye_eyeCenter_x = std_msgs.msg.Float32()
      if self.right_eye_eyeCenter_y is None:
        self.right_eye_eyeCenter_y = std_msgs.msg.Float32()
      if self.right_eye_noseSideLimit_x is None:
        self.right_eye_noseSideLimit_x = std_msgs.msg.Float32()
      if self.right_eye_noseSideLimit_y is None:
        self.right_eye_noseSideLimit_y = std_msgs.msg.Float32()
      if self.right_eye_earSideLimit_x is None:
        self.right_eye_earSideLimit_x = std_msgs.msg.Float32()
      if self.right_eye_earSideLimit_y is None:
        self.right_eye_earSideLimit_y = std_msgs.msg.Float32()
      if self.right_eye_topLimit_x is None:
        self.right_eye_topLimit_x = std_msgs.msg.Float32()
      if self.right_eye_topLimit_y is None:
        self.right_eye_topLimit_y = std_msgs.msg.Float32()
      if self.right_eye_bottomLimit_x is None:
        self.right_eye_bottomLimit_x = std_msgs.msg.Float32()
      if self.right_eye_bottomLimit_y is None:
        self.right_eye_bottomLimit_y = std_msgs.msg.Float32()
      if self.right_eye_midTopEarLimit_x is None:
        self.right_eye_midTopEarLimit_x = std_msgs.msg.Float32()
      if self.right_eye_midTopEarLimit_y is None:
        self.right_eye_midTopEarLimit_y = std_msgs.msg.Float32()
      if self.right_eye_midTopNoseLimit_x is None:
        self.right_eye_midTopNoseLimit_x = std_msgs.msg.Float32()
      if self.right_eye_midTopNoseLimit_y is None:
        self.right_eye_midTopNoseLimit_y = std_msgs.msg.Float32()
      if self.left_eye_eyeCenter_x is None:
        self.left_eye_eyeCenter_x = std_msgs.msg.Float32()
      if self.left_eye_eyeCenter_y is None:
        self.left_eye_eyeCenter_y = std_msgs.msg.Float32()
      if self.left_eye_noseSideLimit_x is None:
        self.left_eye_noseSideLimit_x = std_msgs.msg.Float32()
      if self.left_eye_noseSideLimit_y is None:
        self.left_eye_noseSideLimit_y = std_msgs.msg.Float32()
      if self.left_eye_earSideLimit_x is None:
        self.left_eye_earSideLimit_x = std_msgs.msg.Float32()
      if self.left_eye_earSideLimit_y is None:
        self.left_eye_earSideLimit_y = std_msgs.msg.Float32()
      if self.left_eye_topLimit_x is None:
        self.left_eye_topLimit_x = std_msgs.msg.Float32()
      if self.left_eye_topLimit_y is None:
        self.left_eye_topLimit_y = std_msgs.msg.Float32()
      if self.left_eye_bottomLimit_x is None:
        self.left_eye_bottomLimit_x = std_msgs.msg.Float32()
      if self.left_eye_bottomLimit_y is None:
        self.left_eye_bottomLimit_y = std_msgs.msg.Float32()
      if self.left_eye_midTopEarLimit_x is None:
        self.left_eye_midTopEarLimit_x = std_msgs.msg.Float32()
      if self.left_eye_midTopEarLimit_y is None:
        self.left_eye_midTopEarLimit_y = std_msgs.msg.Float32()
      if self.left_eye_midTopNoseLimit_x is None:
        self.left_eye_midTopNoseLimit_x = std_msgs.msg.Float32()
      if self.left_eye_midTopNoseLimit_y is None:
        self.left_eye_midTopNoseLimit_y = std_msgs.msg.Float32()
      if self.right_eyebrow_noseSideLimit_x is None:
        self.right_eyebrow_noseSideLimit_x = std_msgs.msg.Float32()
      if self.right_eyebrow_noseSideLimit_y is None:
        self.right_eyebrow_noseSideLimit_y = std_msgs.msg.Float32()
      if self.right_eyebrow_center_x is None:
        self.right_eyebrow_center_x = std_msgs.msg.Float32()
      if self.right_eyebrow_center_y is None:
        self.right_eyebrow_center_y = std_msgs.msg.Float32()
      if self.right_eyebrow_earSideLimit_x is None:
        self.right_eyebrow_earSideLimit_x = std_msgs.msg.Float32()
      if self.right_eyebrow_earSideLimit_y is None:
        self.right_eyebrow_earSideLimit_y = std_msgs.msg.Float32()
      if self.left_eyebrow_noseSideLimit_x is None:
        self.left_eyebrow_noseSideLimit_x = std_msgs.msg.Float32()
      if self.left_eyebrow_noseSideLimit_y is None:
        self.left_eyebrow_noseSideLimit_y = std_msgs.msg.Float32()
      if self.left_eyebrow_center_x is None:
        self.left_eyebrow_center_x = std_msgs.msg.Float32()
      if self.left_eyebrow_center_y is None:
        self.left_eyebrow_center_y = std_msgs.msg.Float32()
      if self.left_eyebrow_earSideLimit_x is None:
        self.left_eyebrow_earSideLimit_x = std_msgs.msg.Float32()
      if self.left_eyebrow_earSideLimit_y is None:
        self.left_eyebrow_earSideLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomCenterLimit_x is None:
        self.nose_bottomCenterLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomCenterLimit_y is None:
        self.nose_bottomCenterLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomLeftLimit_x is None:
        self.nose_bottomLeftLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomLeftLimit_y is None:
        self.nose_bottomLeftLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomRightLimit_x is None:
        self.nose_bottomRightLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomRightLimit_y is None:
        self.nose_bottomRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_leftLimit_x is None:
        self.mouth_leftLimit_x = std_msgs.msg.Float32()
      if self.mouth_leftLimit_y is None:
        self.mouth_leftLimit_y = std_msgs.msg.Float32()
      if self.mouth_rightLimit_x is None:
        self.mouth_rightLimit_x = std_msgs.msg.Float32()
      if self.mouth_rightLimit_y is None:
        self.mouth_rightLimit_y = std_msgs.msg.Float32()
      if self.mouth_topLimit_x is None:
        self.mouth_topLimit_x = std_msgs.msg.Float32()
      if self.mouth_topLimit_y is None:
        self.mouth_topLimit_y = std_msgs.msg.Float32()
      if self.mouth_bottomLimit_x is None:
        self.mouth_bottomLimit_x = std_msgs.msg.Float32()
      if self.mouth_bottomLimit_y is None:
        self.mouth_bottomLimit_y = std_msgs.msg.Float32()
      if self.mouth_midTopLeftLimit_x is None:
        self.mouth_midTopLeftLimit_x = std_msgs.msg.Float32()
      if self.mouth_midTopLeftLimit_y is None:
        self.mouth_midTopLeftLimit_y = std_msgs.msg.Float32()
      if self.mouth_midTopRightLimit_x is None:
        self.mouth_midTopRightLimit_x = std_msgs.msg.Float32()
      if self.mouth_midTopRightLimit_y is None:
        self.mouth_midTopRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_midBottomRightLimit_x is None:
        self.mouth_midBottomRightLimit_x = std_msgs.msg.Float32()
      if self.mouth_midBottomRightLimit_y is None:
        self.mouth_midBottomRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_midBottomLeftLimit_x is None:
        self.mouth_midBottomLeftLimit_x = std_msgs.msg.Float32()
      if self.mouth_midBottomLeftLimit_y is None:
        self.mouth_midBottomLeftLimit_y = std_msgs.msg.Float32()
      if self.camera_0_pose is None:
        self.camera_0_pose = geometry_msgs.msg.Pose()
      if self.camera_1_pose is None:
        self.camera_1_pose = geometry_msgs.msg.Pose()
      if self.camera_id is None:
        self.camera_id = std_msgs.msg.Int32()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.face_id.data, _x.score_reco.data,) = _get_struct_if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.face_label.data = str[start:end].decode('utf-8')
      else:
        self.face_label.data = str[start:end]
      _x = self
      start = end
      end += 380
      (_x.shape_alpha.data, _x.shape_beta.data, _x.shape_sizeX.data, _x.shape_sizeY.data, _x.right_eye_eyeCenter_x.data, _x.right_eye_eyeCenter_y.data, _x.right_eye_noseSideLimit_x.data, _x.right_eye_noseSideLimit_y.data, _x.right_eye_earSideLimit_x.data, _x.right_eye_earSideLimit_y.data, _x.right_eye_topLimit_x.data, _x.right_eye_topLimit_y.data, _x.right_eye_bottomLimit_x.data, _x.right_eye_bottomLimit_y.data, _x.right_eye_midTopEarLimit_x.data, _x.right_eye_midTopEarLimit_y.data, _x.right_eye_midTopNoseLimit_x.data, _x.right_eye_midTopNoseLimit_y.data, _x.left_eye_eyeCenter_x.data, _x.left_eye_eyeCenter_y.data, _x.left_eye_noseSideLimit_x.data, _x.left_eye_noseSideLimit_y.data, _x.left_eye_earSideLimit_x.data, _x.left_eye_earSideLimit_y.data, _x.left_eye_topLimit_x.data, _x.left_eye_topLimit_y.data, _x.left_eye_bottomLimit_x.data, _x.left_eye_bottomLimit_y.data, _x.left_eye_midTopEarLimit_x.data, _x.left_eye_midTopEarLimit_y.data, _x.left_eye_midTopNoseLimit_x.data, _x.left_eye_midTopNoseLimit_y.data, _x.right_eyebrow_noseSideLimit_x.data, _x.right_eyebrow_noseSideLimit_y.data, _x.right_eyebrow_center_x.data, _x.right_eyebrow_center_y.data, _x.right_eyebrow_earSideLimit_x.data, _x.right_eyebrow_earSideLimit_y.data, _x.left_eyebrow_noseSideLimit_x.data, _x.left_eyebrow_noseSideLimit_y.data, _x.left_eyebrow_center_x.data, _x.left_eyebrow_center_y.data, _x.left_eyebrow_earSideLimit_x.data, _x.left_eyebrow_earSideLimit_y.data, _x.nose_bottomCenterLimit_x.data, _x.nose_bottomCenterLimit_y.data, _x.nose_bottomLeftLimit_x.data, _x.nose_bottomLeftLimit_y.data, _x.nose_bottomRightLimit_x.data, _x.nose_bottomRightLimit_y.data, _x.mouth_leftLimit_x.data, _x.mouth_leftLimit_y.data, _x.mouth_rightLimit_x.data, _x.mouth_rightLimit_y.data, _x.mouth_topLimit_x.data, _x.mouth_topLimit_y.data, _x.mouth_bottomLimit_x.data, _x.mouth_bottomLimit_y.data, _x.mouth_midTopLeftLimit_x.data, _x.mouth_midTopLeftLimit_y.data, _x.mouth_midTopRightLimit_x.data, _x.mouth_midTopRightLimit_y.data, _x.mouth_midBottomRightLimit_x.data, _x.mouth_midBottomRightLimit_y.data, _x.mouth_midBottomLeftLimit_x.data, _x.mouth_midBottomLeftLimit_y.data, _x.camera_0_pose.position.x, _x.camera_0_pose.position.y, _x.camera_0_pose.position.z, _x.camera_0_pose.orientation.x, _x.camera_0_pose.orientation.y, _x.camera_0_pose.orientation.z, _x.camera_0_pose.orientation.w, _x.camera_1_pose.position.x, _x.camera_1_pose.position.y, _x.camera_1_pose.position.z, _x.camera_1_pose.orientation.x, _x.camera_1_pose.orientation.y, _x.camera_1_pose.orientation.z, _x.camera_1_pose.orientation.w, _x.camera_id.data,) = _get_struct_66f14di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_if().pack(_x.face_id.data, _x.score_reco.data))
      _x = self.face_label.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_66f14di().pack(_x.shape_alpha.data, _x.shape_beta.data, _x.shape_sizeX.data, _x.shape_sizeY.data, _x.right_eye_eyeCenter_x.data, _x.right_eye_eyeCenter_y.data, _x.right_eye_noseSideLimit_x.data, _x.right_eye_noseSideLimit_y.data, _x.right_eye_earSideLimit_x.data, _x.right_eye_earSideLimit_y.data, _x.right_eye_topLimit_x.data, _x.right_eye_topLimit_y.data, _x.right_eye_bottomLimit_x.data, _x.right_eye_bottomLimit_y.data, _x.right_eye_midTopEarLimit_x.data, _x.right_eye_midTopEarLimit_y.data, _x.right_eye_midTopNoseLimit_x.data, _x.right_eye_midTopNoseLimit_y.data, _x.left_eye_eyeCenter_x.data, _x.left_eye_eyeCenter_y.data, _x.left_eye_noseSideLimit_x.data, _x.left_eye_noseSideLimit_y.data, _x.left_eye_earSideLimit_x.data, _x.left_eye_earSideLimit_y.data, _x.left_eye_topLimit_x.data, _x.left_eye_topLimit_y.data, _x.left_eye_bottomLimit_x.data, _x.left_eye_bottomLimit_y.data, _x.left_eye_midTopEarLimit_x.data, _x.left_eye_midTopEarLimit_y.data, _x.left_eye_midTopNoseLimit_x.data, _x.left_eye_midTopNoseLimit_y.data, _x.right_eyebrow_noseSideLimit_x.data, _x.right_eyebrow_noseSideLimit_y.data, _x.right_eyebrow_center_x.data, _x.right_eyebrow_center_y.data, _x.right_eyebrow_earSideLimit_x.data, _x.right_eyebrow_earSideLimit_y.data, _x.left_eyebrow_noseSideLimit_x.data, _x.left_eyebrow_noseSideLimit_y.data, _x.left_eyebrow_center_x.data, _x.left_eyebrow_center_y.data, _x.left_eyebrow_earSideLimit_x.data, _x.left_eyebrow_earSideLimit_y.data, _x.nose_bottomCenterLimit_x.data, _x.nose_bottomCenterLimit_y.data, _x.nose_bottomLeftLimit_x.data, _x.nose_bottomLeftLimit_y.data, _x.nose_bottomRightLimit_x.data, _x.nose_bottomRightLimit_y.data, _x.mouth_leftLimit_x.data, _x.mouth_leftLimit_y.data, _x.mouth_rightLimit_x.data, _x.mouth_rightLimit_y.data, _x.mouth_topLimit_x.data, _x.mouth_topLimit_y.data, _x.mouth_bottomLimit_x.data, _x.mouth_bottomLimit_y.data, _x.mouth_midTopLeftLimit_x.data, _x.mouth_midTopLeftLimit_y.data, _x.mouth_midTopRightLimit_x.data, _x.mouth_midTopRightLimit_y.data, _x.mouth_midBottomRightLimit_x.data, _x.mouth_midBottomRightLimit_y.data, _x.mouth_midBottomLeftLimit_x.data, _x.mouth_midBottomLeftLimit_y.data, _x.camera_0_pose.position.x, _x.camera_0_pose.position.y, _x.camera_0_pose.position.z, _x.camera_0_pose.orientation.x, _x.camera_0_pose.orientation.y, _x.camera_0_pose.orientation.z, _x.camera_0_pose.orientation.w, _x.camera_1_pose.position.x, _x.camera_1_pose.position.y, _x.camera_1_pose.position.z, _x.camera_1_pose.orientation.x, _x.camera_1_pose.orientation.y, _x.camera_1_pose.orientation.z, _x.camera_1_pose.orientation.w, _x.camera_id.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.face_id is None:
        self.face_id = std_msgs.msg.Int32()
      if self.score_reco is None:
        self.score_reco = std_msgs.msg.Float32()
      if self.face_label is None:
        self.face_label = std_msgs.msg.String()
      if self.shape_alpha is None:
        self.shape_alpha = std_msgs.msg.Float32()
      if self.shape_beta is None:
        self.shape_beta = std_msgs.msg.Float32()
      if self.shape_sizeX is None:
        self.shape_sizeX = std_msgs.msg.Float32()
      if self.shape_sizeY is None:
        self.shape_sizeY = std_msgs.msg.Float32()
      if self.right_eye_eyeCenter_x is None:
        self.right_eye_eyeCenter_x = std_msgs.msg.Float32()
      if self.right_eye_eyeCenter_y is None:
        self.right_eye_eyeCenter_y = std_msgs.msg.Float32()
      if self.right_eye_noseSideLimit_x is None:
        self.right_eye_noseSideLimit_x = std_msgs.msg.Float32()
      if self.right_eye_noseSideLimit_y is None:
        self.right_eye_noseSideLimit_y = std_msgs.msg.Float32()
      if self.right_eye_earSideLimit_x is None:
        self.right_eye_earSideLimit_x = std_msgs.msg.Float32()
      if self.right_eye_earSideLimit_y is None:
        self.right_eye_earSideLimit_y = std_msgs.msg.Float32()
      if self.right_eye_topLimit_x is None:
        self.right_eye_topLimit_x = std_msgs.msg.Float32()
      if self.right_eye_topLimit_y is None:
        self.right_eye_topLimit_y = std_msgs.msg.Float32()
      if self.right_eye_bottomLimit_x is None:
        self.right_eye_bottomLimit_x = std_msgs.msg.Float32()
      if self.right_eye_bottomLimit_y is None:
        self.right_eye_bottomLimit_y = std_msgs.msg.Float32()
      if self.right_eye_midTopEarLimit_x is None:
        self.right_eye_midTopEarLimit_x = std_msgs.msg.Float32()
      if self.right_eye_midTopEarLimit_y is None:
        self.right_eye_midTopEarLimit_y = std_msgs.msg.Float32()
      if self.right_eye_midTopNoseLimit_x is None:
        self.right_eye_midTopNoseLimit_x = std_msgs.msg.Float32()
      if self.right_eye_midTopNoseLimit_y is None:
        self.right_eye_midTopNoseLimit_y = std_msgs.msg.Float32()
      if self.left_eye_eyeCenter_x is None:
        self.left_eye_eyeCenter_x = std_msgs.msg.Float32()
      if self.left_eye_eyeCenter_y is None:
        self.left_eye_eyeCenter_y = std_msgs.msg.Float32()
      if self.left_eye_noseSideLimit_x is None:
        self.left_eye_noseSideLimit_x = std_msgs.msg.Float32()
      if self.left_eye_noseSideLimit_y is None:
        self.left_eye_noseSideLimit_y = std_msgs.msg.Float32()
      if self.left_eye_earSideLimit_x is None:
        self.left_eye_earSideLimit_x = std_msgs.msg.Float32()
      if self.left_eye_earSideLimit_y is None:
        self.left_eye_earSideLimit_y = std_msgs.msg.Float32()
      if self.left_eye_topLimit_x is None:
        self.left_eye_topLimit_x = std_msgs.msg.Float32()
      if self.left_eye_topLimit_y is None:
        self.left_eye_topLimit_y = std_msgs.msg.Float32()
      if self.left_eye_bottomLimit_x is None:
        self.left_eye_bottomLimit_x = std_msgs.msg.Float32()
      if self.left_eye_bottomLimit_y is None:
        self.left_eye_bottomLimit_y = std_msgs.msg.Float32()
      if self.left_eye_midTopEarLimit_x is None:
        self.left_eye_midTopEarLimit_x = std_msgs.msg.Float32()
      if self.left_eye_midTopEarLimit_y is None:
        self.left_eye_midTopEarLimit_y = std_msgs.msg.Float32()
      if self.left_eye_midTopNoseLimit_x is None:
        self.left_eye_midTopNoseLimit_x = std_msgs.msg.Float32()
      if self.left_eye_midTopNoseLimit_y is None:
        self.left_eye_midTopNoseLimit_y = std_msgs.msg.Float32()
      if self.right_eyebrow_noseSideLimit_x is None:
        self.right_eyebrow_noseSideLimit_x = std_msgs.msg.Float32()
      if self.right_eyebrow_noseSideLimit_y is None:
        self.right_eyebrow_noseSideLimit_y = std_msgs.msg.Float32()
      if self.right_eyebrow_center_x is None:
        self.right_eyebrow_center_x = std_msgs.msg.Float32()
      if self.right_eyebrow_center_y is None:
        self.right_eyebrow_center_y = std_msgs.msg.Float32()
      if self.right_eyebrow_earSideLimit_x is None:
        self.right_eyebrow_earSideLimit_x = std_msgs.msg.Float32()
      if self.right_eyebrow_earSideLimit_y is None:
        self.right_eyebrow_earSideLimit_y = std_msgs.msg.Float32()
      if self.left_eyebrow_noseSideLimit_x is None:
        self.left_eyebrow_noseSideLimit_x = std_msgs.msg.Float32()
      if self.left_eyebrow_noseSideLimit_y is None:
        self.left_eyebrow_noseSideLimit_y = std_msgs.msg.Float32()
      if self.left_eyebrow_center_x is None:
        self.left_eyebrow_center_x = std_msgs.msg.Float32()
      if self.left_eyebrow_center_y is None:
        self.left_eyebrow_center_y = std_msgs.msg.Float32()
      if self.left_eyebrow_earSideLimit_x is None:
        self.left_eyebrow_earSideLimit_x = std_msgs.msg.Float32()
      if self.left_eyebrow_earSideLimit_y is None:
        self.left_eyebrow_earSideLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomCenterLimit_x is None:
        self.nose_bottomCenterLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomCenterLimit_y is None:
        self.nose_bottomCenterLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomLeftLimit_x is None:
        self.nose_bottomLeftLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomLeftLimit_y is None:
        self.nose_bottomLeftLimit_y = std_msgs.msg.Float32()
      if self.nose_bottomRightLimit_x is None:
        self.nose_bottomRightLimit_x = std_msgs.msg.Float32()
      if self.nose_bottomRightLimit_y is None:
        self.nose_bottomRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_leftLimit_x is None:
        self.mouth_leftLimit_x = std_msgs.msg.Float32()
      if self.mouth_leftLimit_y is None:
        self.mouth_leftLimit_y = std_msgs.msg.Float32()
      if self.mouth_rightLimit_x is None:
        self.mouth_rightLimit_x = std_msgs.msg.Float32()
      if self.mouth_rightLimit_y is None:
        self.mouth_rightLimit_y = std_msgs.msg.Float32()
      if self.mouth_topLimit_x is None:
        self.mouth_topLimit_x = std_msgs.msg.Float32()
      if self.mouth_topLimit_y is None:
        self.mouth_topLimit_y = std_msgs.msg.Float32()
      if self.mouth_bottomLimit_x is None:
        self.mouth_bottomLimit_x = std_msgs.msg.Float32()
      if self.mouth_bottomLimit_y is None:
        self.mouth_bottomLimit_y = std_msgs.msg.Float32()
      if self.mouth_midTopLeftLimit_x is None:
        self.mouth_midTopLeftLimit_x = std_msgs.msg.Float32()
      if self.mouth_midTopLeftLimit_y is None:
        self.mouth_midTopLeftLimit_y = std_msgs.msg.Float32()
      if self.mouth_midTopRightLimit_x is None:
        self.mouth_midTopRightLimit_x = std_msgs.msg.Float32()
      if self.mouth_midTopRightLimit_y is None:
        self.mouth_midTopRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_midBottomRightLimit_x is None:
        self.mouth_midBottomRightLimit_x = std_msgs.msg.Float32()
      if self.mouth_midBottomRightLimit_y is None:
        self.mouth_midBottomRightLimit_y = std_msgs.msg.Float32()
      if self.mouth_midBottomLeftLimit_x is None:
        self.mouth_midBottomLeftLimit_x = std_msgs.msg.Float32()
      if self.mouth_midBottomLeftLimit_y is None:
        self.mouth_midBottomLeftLimit_y = std_msgs.msg.Float32()
      if self.camera_0_pose is None:
        self.camera_0_pose = geometry_msgs.msg.Pose()
      if self.camera_1_pose is None:
        self.camera_1_pose = geometry_msgs.msg.Pose()
      if self.camera_id is None:
        self.camera_id = std_msgs.msg.Int32()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.face_id.data, _x.score_reco.data,) = _get_struct_if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.face_label.data = str[start:end].decode('utf-8')
      else:
        self.face_label.data = str[start:end]
      _x = self
      start = end
      end += 380
      (_x.shape_alpha.data, _x.shape_beta.data, _x.shape_sizeX.data, _x.shape_sizeY.data, _x.right_eye_eyeCenter_x.data, _x.right_eye_eyeCenter_y.data, _x.right_eye_noseSideLimit_x.data, _x.right_eye_noseSideLimit_y.data, _x.right_eye_earSideLimit_x.data, _x.right_eye_earSideLimit_y.data, _x.right_eye_topLimit_x.data, _x.right_eye_topLimit_y.data, _x.right_eye_bottomLimit_x.data, _x.right_eye_bottomLimit_y.data, _x.right_eye_midTopEarLimit_x.data, _x.right_eye_midTopEarLimit_y.data, _x.right_eye_midTopNoseLimit_x.data, _x.right_eye_midTopNoseLimit_y.data, _x.left_eye_eyeCenter_x.data, _x.left_eye_eyeCenter_y.data, _x.left_eye_noseSideLimit_x.data, _x.left_eye_noseSideLimit_y.data, _x.left_eye_earSideLimit_x.data, _x.left_eye_earSideLimit_y.data, _x.left_eye_topLimit_x.data, _x.left_eye_topLimit_y.data, _x.left_eye_bottomLimit_x.data, _x.left_eye_bottomLimit_y.data, _x.left_eye_midTopEarLimit_x.data, _x.left_eye_midTopEarLimit_y.data, _x.left_eye_midTopNoseLimit_x.data, _x.left_eye_midTopNoseLimit_y.data, _x.right_eyebrow_noseSideLimit_x.data, _x.right_eyebrow_noseSideLimit_y.data, _x.right_eyebrow_center_x.data, _x.right_eyebrow_center_y.data, _x.right_eyebrow_earSideLimit_x.data, _x.right_eyebrow_earSideLimit_y.data, _x.left_eyebrow_noseSideLimit_x.data, _x.left_eyebrow_noseSideLimit_y.data, _x.left_eyebrow_center_x.data, _x.left_eyebrow_center_y.data, _x.left_eyebrow_earSideLimit_x.data, _x.left_eyebrow_earSideLimit_y.data, _x.nose_bottomCenterLimit_x.data, _x.nose_bottomCenterLimit_y.data, _x.nose_bottomLeftLimit_x.data, _x.nose_bottomLeftLimit_y.data, _x.nose_bottomRightLimit_x.data, _x.nose_bottomRightLimit_y.data, _x.mouth_leftLimit_x.data, _x.mouth_leftLimit_y.data, _x.mouth_rightLimit_x.data, _x.mouth_rightLimit_y.data, _x.mouth_topLimit_x.data, _x.mouth_topLimit_y.data, _x.mouth_bottomLimit_x.data, _x.mouth_bottomLimit_y.data, _x.mouth_midTopLeftLimit_x.data, _x.mouth_midTopLeftLimit_y.data, _x.mouth_midTopRightLimit_x.data, _x.mouth_midTopRightLimit_y.data, _x.mouth_midBottomRightLimit_x.data, _x.mouth_midBottomRightLimit_y.data, _x.mouth_midBottomLeftLimit_x.data, _x.mouth_midBottomLeftLimit_y.data, _x.camera_0_pose.position.x, _x.camera_0_pose.position.y, _x.camera_0_pose.position.z, _x.camera_0_pose.orientation.x, _x.camera_0_pose.orientation.y, _x.camera_0_pose.orientation.z, _x.camera_0_pose.orientation.w, _x.camera_1_pose.position.x, _x.camera_1_pose.position.y, _x.camera_1_pose.position.z, _x.camera_1_pose.orientation.x, _x.camera_1_pose.orientation.y, _x.camera_1_pose.orientation.z, _x.camera_1_pose.orientation.w, _x.camera_id.data,) = _get_struct_66f14di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_66f14di = None
def _get_struct_66f14di():
    global _struct_66f14di
    if _struct_66f14di is None:
        _struct_66f14di = struct.Struct("<66f14di")
    return _struct_66f14di
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if

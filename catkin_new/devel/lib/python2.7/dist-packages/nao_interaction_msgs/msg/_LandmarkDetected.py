# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nao_interaction_msgs/LandmarkDetected.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class LandmarkDetected(genpy.Message):
  _md5sum = "4d97e85c0a306501da5d22b795cdac76"
  _type = "nao_interaction_msgs/LandmarkDetected"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message emitted by Nao landmark detection module.
# Contains information about the landmarks detected

Header header

# Vectors holding the landmark information
std_msgs/Int32[] mark_ids
std_msgs/Float32[] shape_alpha
std_msgs/Float32[] shape_beta
std_msgs/Float32[] shape_sizex
std_msgs/Float32[] shape_sizey

geometry_msgs/Pose camera_local_pose

geometry_msgs/Pose camera_world_pose

std_msgs/String camera_name

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['header','mark_ids','shape_alpha','shape_beta','shape_sizex','shape_sizey','camera_local_pose','camera_world_pose','camera_name']
  _slot_types = ['std_msgs/Header','std_msgs/Int32[]','std_msgs/Float32[]','std_msgs/Float32[]','std_msgs/Float32[]','std_msgs/Float32[]','geometry_msgs/Pose','geometry_msgs/Pose','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mark_ids,shape_alpha,shape_beta,shape_sizex,shape_sizey,camera_local_pose,camera_world_pose,camera_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LandmarkDetected, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mark_ids is None:
        self.mark_ids = []
      if self.shape_alpha is None:
        self.shape_alpha = []
      if self.shape_beta is None:
        self.shape_beta = []
      if self.shape_sizex is None:
        self.shape_sizex = []
      if self.shape_sizey is None:
        self.shape_sizey = []
      if self.camera_local_pose is None:
        self.camera_local_pose = geometry_msgs.msg.Pose()
      if self.camera_world_pose is None:
        self.camera_world_pose = geometry_msgs.msg.Pose()
      if self.camera_name is None:
        self.camera_name = std_msgs.msg.String()
    else:
      self.header = std_msgs.msg.Header()
      self.mark_ids = []
      self.shape_alpha = []
      self.shape_beta = []
      self.shape_sizex = []
      self.shape_sizey = []
      self.camera_local_pose = geometry_msgs.msg.Pose()
      self.camera_world_pose = geometry_msgs.msg.Pose()
      self.camera_name = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.mark_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.mark_ids:
        buff.write(_get_struct_i().pack(val1.data))
      length = len(self.shape_alpha)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_alpha:
        buff.write(_get_struct_f().pack(val1.data))
      length = len(self.shape_beta)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_beta:
        buff.write(_get_struct_f().pack(val1.data))
      length = len(self.shape_sizex)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_sizex:
        buff.write(_get_struct_f().pack(val1.data))
      length = len(self.shape_sizey)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_sizey:
        buff.write(_get_struct_f().pack(val1.data))
      _x = self
      buff.write(_get_struct_14d().pack(_x.camera_local_pose.position.x, _x.camera_local_pose.position.y, _x.camera_local_pose.position.z, _x.camera_local_pose.orientation.x, _x.camera_local_pose.orientation.y, _x.camera_local_pose.orientation.z, _x.camera_local_pose.orientation.w, _x.camera_world_pose.position.x, _x.camera_world_pose.position.y, _x.camera_world_pose.position.z, _x.camera_world_pose.orientation.x, _x.camera_world_pose.orientation.y, _x.camera_world_pose.orientation.z, _x.camera_world_pose.orientation.w))
      _x = self.camera_name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mark_ids is None:
        self.mark_ids = None
      if self.shape_alpha is None:
        self.shape_alpha = None
      if self.shape_beta is None:
        self.shape_beta = None
      if self.shape_sizex is None:
        self.shape_sizex = None
      if self.shape_sizey is None:
        self.shape_sizey = None
      if self.camera_local_pose is None:
        self.camera_local_pose = geometry_msgs.msg.Pose()
      if self.camera_world_pose is None:
        self.camera_world_pose = geometry_msgs.msg.Pose()
      if self.camera_name is None:
        self.camera_name = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mark_ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.mark_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_alpha = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.shape_alpha.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_beta = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.shape_beta.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_sizex = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.shape_sizex.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_sizey = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.shape_sizey.append(val1)
      _x = self
      start = end
      end += 112
      (_x.camera_local_pose.position.x, _x.camera_local_pose.position.y, _x.camera_local_pose.position.z, _x.camera_local_pose.orientation.x, _x.camera_local_pose.orientation.y, _x.camera_local_pose.orientation.z, _x.camera_local_pose.orientation.w, _x.camera_world_pose.position.x, _x.camera_world_pose.position.y, _x.camera_world_pose.position.z, _x.camera_world_pose.orientation.x, _x.camera_world_pose.orientation.y, _x.camera_world_pose.orientation.z, _x.camera_world_pose.orientation.w,) = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_name.data = str[start:end].decode('utf-8')
      else:
        self.camera_name.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.mark_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.mark_ids:
        buff.write(_get_struct_i().pack(val1.data))
      length = len(self.shape_alpha)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_alpha:
        buff.write(_get_struct_f().pack(val1.data))
      length = len(self.shape_beta)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_beta:
        buff.write(_get_struct_f().pack(val1.data))
      length = len(self.shape_sizex)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_sizex:
        buff.write(_get_struct_f().pack(val1.data))
      length = len(self.shape_sizey)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_sizey:
        buff.write(_get_struct_f().pack(val1.data))
      _x = self
      buff.write(_get_struct_14d().pack(_x.camera_local_pose.position.x, _x.camera_local_pose.position.y, _x.camera_local_pose.position.z, _x.camera_local_pose.orientation.x, _x.camera_local_pose.orientation.y, _x.camera_local_pose.orientation.z, _x.camera_local_pose.orientation.w, _x.camera_world_pose.position.x, _x.camera_world_pose.position.y, _x.camera_world_pose.position.z, _x.camera_world_pose.orientation.x, _x.camera_world_pose.orientation.y, _x.camera_world_pose.orientation.z, _x.camera_world_pose.orientation.w))
      _x = self.camera_name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mark_ids is None:
        self.mark_ids = None
      if self.shape_alpha is None:
        self.shape_alpha = None
      if self.shape_beta is None:
        self.shape_beta = None
      if self.shape_sizex is None:
        self.shape_sizex = None
      if self.shape_sizey is None:
        self.shape_sizey = None
      if self.camera_local_pose is None:
        self.camera_local_pose = geometry_msgs.msg.Pose()
      if self.camera_world_pose is None:
        self.camera_world_pose = geometry_msgs.msg.Pose()
      if self.camera_name is None:
        self.camera_name = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mark_ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.mark_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_alpha = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.shape_alpha.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_beta = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.shape_beta.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_sizex = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.shape_sizex.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_sizey = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.shape_sizey.append(val1)
      _x = self
      start = end
      end += 112
      (_x.camera_local_pose.position.x, _x.camera_local_pose.position.y, _x.camera_local_pose.position.z, _x.camera_local_pose.orientation.x, _x.camera_local_pose.orientation.y, _x.camera_local_pose.orientation.z, _x.camera_local_pose.orientation.w, _x.camera_world_pose.position.x, _x.camera_world_pose.position.y, _x.camera_world_pose.position.z, _x.camera_world_pose.orientation.x, _x.camera_world_pose.orientation.y, _x.camera_world_pose.orientation.z, _x.camera_world_pose.orientation.w,) = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_name.data = str[start:end].decode('utf-8')
      else:
        self.camera_name.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

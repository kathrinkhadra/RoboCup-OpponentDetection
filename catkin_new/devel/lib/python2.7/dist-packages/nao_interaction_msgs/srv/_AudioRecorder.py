# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nao_interaction_msgs/AudioRecorderRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AudioRecorderRequest(genpy.Message):
  _md5sum = "b211df69b24b5ed7b95654b151a08b5c"
  _type = "nao_interaction_msgs/AudioRecorderRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """



std_msgs/String file_path
std_msgs/Int32 secs


std_msgs/Char audio_type

std_msgs/Bool left_channel
std_msgs/Bool right_channel
std_msgs/Bool front_channel
std_msgs/Bool rear_channel


std_msgs/Int32 samplerate

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Char
char data
================================================================================
MSG: std_msgs/Bool
bool data"""
  __slots__ = ['file_path','secs','audio_type','left_channel','right_channel','front_channel','rear_channel','samplerate']
  _slot_types = ['std_msgs/String','std_msgs/Int32','std_msgs/Char','std_msgs/Bool','std_msgs/Bool','std_msgs/Bool','std_msgs/Bool','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       file_path,secs,audio_type,left_channel,right_channel,front_channel,rear_channel,samplerate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AudioRecorderRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.file_path is None:
        self.file_path = std_msgs.msg.String()
      if self.secs is None:
        self.secs = std_msgs.msg.Int32()
      if self.audio_type is None:
        self.audio_type = std_msgs.msg.Char()
      if self.left_channel is None:
        self.left_channel = std_msgs.msg.Bool()
      if self.right_channel is None:
        self.right_channel = std_msgs.msg.Bool()
      if self.front_channel is None:
        self.front_channel = std_msgs.msg.Bool()
      if self.rear_channel is None:
        self.rear_channel = std_msgs.msg.Bool()
      if self.samplerate is None:
        self.samplerate = std_msgs.msg.Int32()
    else:
      self.file_path = std_msgs.msg.String()
      self.secs = std_msgs.msg.Int32()
      self.audio_type = std_msgs.msg.Char()
      self.left_channel = std_msgs.msg.Bool()
      self.right_channel = std_msgs.msg.Bool()
      self.front_channel = std_msgs.msg.Bool()
      self.rear_channel = std_msgs.msg.Bool()
      self.samplerate = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.file_path.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i5Bi().pack(_x.secs.data, _x.audio_type.data, _x.left_channel.data, _x.right_channel.data, _x.front_channel.data, _x.rear_channel.data, _x.samplerate.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.file_path is None:
        self.file_path = std_msgs.msg.String()
      if self.secs is None:
        self.secs = std_msgs.msg.Int32()
      if self.audio_type is None:
        self.audio_type = std_msgs.msg.Char()
      if self.left_channel is None:
        self.left_channel = std_msgs.msg.Bool()
      if self.right_channel is None:
        self.right_channel = std_msgs.msg.Bool()
      if self.front_channel is None:
        self.front_channel = std_msgs.msg.Bool()
      if self.rear_channel is None:
        self.rear_channel = std_msgs.msg.Bool()
      if self.samplerate is None:
        self.samplerate = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.file_path.data = str[start:end].decode('utf-8')
      else:
        self.file_path.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.secs.data, _x.audio_type.data, _x.left_channel.data, _x.right_channel.data, _x.front_channel.data, _x.rear_channel.data, _x.samplerate.data,) = _get_struct_i5Bi().unpack(str[start:end])
      self.left_channel.data = bool(self.left_channel.data)
      self.right_channel.data = bool(self.right_channel.data)
      self.front_channel.data = bool(self.front_channel.data)
      self.rear_channel.data = bool(self.rear_channel.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.file_path.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i5Bi().pack(_x.secs.data, _x.audio_type.data, _x.left_channel.data, _x.right_channel.data, _x.front_channel.data, _x.rear_channel.data, _x.samplerate.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.file_path is None:
        self.file_path = std_msgs.msg.String()
      if self.secs is None:
        self.secs = std_msgs.msg.Int32()
      if self.audio_type is None:
        self.audio_type = std_msgs.msg.Char()
      if self.left_channel is None:
        self.left_channel = std_msgs.msg.Bool()
      if self.right_channel is None:
        self.right_channel = std_msgs.msg.Bool()
      if self.front_channel is None:
        self.front_channel = std_msgs.msg.Bool()
      if self.rear_channel is None:
        self.rear_channel = std_msgs.msg.Bool()
      if self.samplerate is None:
        self.samplerate = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.file_path.data = str[start:end].decode('utf-8')
      else:
        self.file_path.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.secs.data, _x.audio_type.data, _x.left_channel.data, _x.right_channel.data, _x.front_channel.data, _x.rear_channel.data, _x.samplerate.data,) = _get_struct_i5Bi().unpack(str[start:end])
      self.left_channel.data = bool(self.left_channel.data)
      self.right_channel.data = bool(self.right_channel.data)
      self.front_channel.data = bool(self.front_channel.data)
      self.rear_channel.data = bool(self.rear_channel.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i5Bi = None
def _get_struct_i5Bi():
    global _struct_i5Bi
    if _struct_i5Bi is None:
        _struct_i5Bi = struct.Struct("<i5Bi")
    return _struct_i5Bi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nao_interaction_msgs/AudioRecorderResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AudioRecorderResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "nao_interaction_msgs/AudioRecorderResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AudioRecorderResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class AudioRecorder(object):
  _type          = 'nao_interaction_msgs/AudioRecorder'
  _md5sum = 'b211df69b24b5ed7b95654b151a08b5c'
  _request_class  = AudioRecorderRequest
  _response_class = AudioRecorderResponse
